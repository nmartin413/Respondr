!function(root,factory){"function"==typeof define&&define.amd?define(["underscore"],factory):root.Respondr=factory(this._)}(this,function(_){"use strict";function RangeNotFoundError(message){this.name="RangeNotFoundError",this.message=message||"could not find range"}function Range(span,name){if(!(span instanceof Array))throw new TypeError("new range requires an array span parameter");if("string"!=typeof name)throw new TypeError("new range requires a string name parameter");this.validateSpan(span),this.name=name,this.min=span[0],this.max=span[1]||1/0,this.events={enter:[],exit:[]}}RangeNotFoundError.prototype=new Error,RangeNotFoundError.prototype.constructor=RangeNotFoundError;var genericEventAttacher=function(ranges,type,rangeName){var targetRange=ranges[rangeName];if(!(targetRange instanceof Range))throw new RangeNotFoundError("could not find range: "+type);return{run:_(genericRun).partial(targetRange,type)}},genericRun=function(range,type,fn){range.addEvent(type,fn)};Range.prototype=new Object,Range.prototype.constructor=Range,Range.prototype.validateSpan=function(span){if("object"!=typeof span)throw new TypeError("invalid span for range");if(1!==span.length&&2!==span.length)throw new Error("span must have exactly 1 or 2 boundaries");if(_(span).each(function(n){if(1/0!==n){if(n===+n&&n!==(0|n))throw new TypeError("range boundaries can not be floats");if(0>n)throw new RangeError("range boundaries can not be negative")}}),1!==span.length&&span[0]>span[1])throw new RangeError("first boundary cannot be greater than second")},Range.prototype.addEvent=function(type,fn){if("function"!=typeof fn)throw new TypeError("event responder must be a function");this.validateEventType(type),this.events[type].push(fn)},Range.prototype.validateEventType=function(type){if("enter"!==type&&"exit"!==type)throw new Error("event type must be exit or enter")},Range.prototype.doesContain=function(val){return val>this.min&&val<this.max},Range.prototype.getTypeForChange=function(start,end){if(start>this.max&&end>this.max)return"above";if(start<this.min&&end<this.min)return"below";if(start<this.min&&end>this.max)return"across";if(start>this.max&&end<this.min)return"across";var startInside=start>this.min&&start<this.max,endInside=end>this.min&&end<this.max;return startInside&&endInside?"inside":startInside&&end<this.max?"exit":startInside&&end>this.min?"exit":endInside&&start>this.max?"enter":endInside&&start<this.min?"enter":void 0};var create=function(){var inst={},metric=inst.metric={lastWidth:-1,width:-1},ranges=inst.ranges={all:new Range([0,1/0],"all")},logging=!1,getRangesForChange=function(){return _(ranges).filter(function(range){var changeType=range.getTypeForChange(metric.lastWidth,metric.width);return"exit"===changeType||"enter"===changeType?!0:!1})},getRangeActions=function(){var changed=getRangesForChange();return _(changed).map(function(range){return{changeType:range.getTypeForChange(metric.lastWidth,metric.width),range:range}})},executeActions=function(){var actions=getRangeActions(),orderedActions=_(actions).sortBy(function(action){return"enter"===action.changeType?2:"exit"===action.changeType?1:void 0});_(orderedActions).each(function(action){var events=action.range.events[action.changeType];_(events).each(function(fn){fn.call()})})},set=inst.set={ranges:function(rangeMap){if("object"!=typeof rangeMap)throw new TypeError("invalid object");_(rangeMap).each(function(span,name){ranges[name]=new Range(span,name)})},width:function(val){metric.lastWidth=metric.width,metric.width=val,executeActions()},logging:function(val){logging=val}};inst.on={enter:_(genericEventAttacher).partial(ranges,"enter"),exit:_(genericEventAttacher).partial(ranges,"exit")};var listen=function(){window.addEventListener?window.addEventListener("resize",updateWidthFromWindow):window.attachEvent&&window.attachEvent("onresize",updateWidthFromWindow),updateWidthFromWindow()},updateWidthFromWindow=function(){var newWidth=window.innerWidth||document.documentElement.clientWidth;set.width(newWidth)};return inst.getRangeActions=getRangeActions,inst.getRangesForChange=getRangesForChange,inst.listen=listen,inst};return{create:create,Range:Range,RangeNotFoundError:RangeNotFoundError}});